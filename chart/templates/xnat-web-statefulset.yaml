---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "xnat.fullname" . }}-web
  labels:
    {{- include "xnat.labels" . | nindent 4 }}
spec:
  {{- if not .Values.web.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "xnat.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.web.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "xnat.labels" . | nindent 8 }}
        {{- with .Values.web.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      imagePullSecrets:
      {{- if .Values.imageCredentials.enabled }}
        - name: image-pull-secret
      {{- else }}
        - name: {{ .Values.image.pullSecret | quote }}
      {{- end }}
      serviceAccountName: {{ include "xnat.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.web.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.web.securityContext | nindent 12 }}
          image: {{ include "xnat.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            {{- toYaml .Values.web.resources | nindent 12 }}
          livenessProbe:
            {{- toYaml .Values.web.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.web.readinessProbe | nindent 12 }}
          startupProbe:
            {{- toYaml .Values.web.startupProbe | nindent 12 }}
          volumeMounts:
            - name: node-conf
              mountPath: /data/xnat/home/config/node-conf.properties
              subPath: node-conf.properties
            - name: xnat-config
              mountPath: /data/xnat/home/config/xnat-conf.properties
              subPath: xnat-conf.properties
          {{- if .Values.web.auth.openid.enabled }}
            - name: xnat-openid-config
              mountPath: /data/xnat/home/config/auth/openid-conf.properties
              readOnly: true
              subPath: openid-conf.properties
          {{- end }}
          {{- with .Values.volumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          command:
            - /bin/sh
            - -c
            - |
              /usr/local/tomcat/bin/catalina.sh run
      initContainers:
        - name: wait-for-postgres
          image: {{ include "xnat.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.cluster.initdb.secret.name }}
                  key: username
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.cluster.initdb.secret.name }}
                  key: password
          command:
            - 'bash'
            - '-c'
            - |
              set -e
              until psql -h {{ template "xnat.postgresql.svc" . }} -c '\q'; do
                >&2 echo "Postgres is unavailable - sleeping"
                sleep 30
              done
              >&2 echo "Postgres is up"
        - name: xnat-datasource
          image: {{ include "xnat.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: XNAT_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.cluster.initdb.secret.name }}
                  key: username
            - name: XNAT_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.cluster.initdb.secret.name }}
                  key: password
          command:
            - 'bash'
            - '-c'
            - |
              set -x
              cat <<EOF > /xnat/xnat-conf.properties
              datasource.driver=org.postgresql.Driver
              datasource.url=jdbc:postgresql://{{ template "xnat.postgresql.svc" . }}/{{ .Values.postgresql.cluster.initdb.database }}
              datasource.username=$XNAT_DATASOURCE_USERNAME
              datasource.password=$XNAT_DATASOURCE_PASSWORD
              hibernate.dialect=org.hibernate.dialect.PostgreSQL9Dialect
              hibernate.hbm2ddl.auto=update
              hibernate.show_sql=false
              hibernate.cache.use_second_level_cache=true
              hibernate.cache.use_query_cache=true
              EOF
          volumeMounts:
            - name: xnat-config
              mountPath: /xnat
        - name: node-conf
          image: {{ include "xnat.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - 'bash'
            - '-c'
            - |
              set -x
              echo "node.id=$HOSTNAME" > /xnat/node-conf.properties
          volumeMounts:
            - name: node-conf
              mountPath: /xnat
        {{- if .Values.web.auth.openid.enabled }}
        - name: openid-conf
          image: {{ include "xnat.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: OPENID_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.web.auth.openid.secretName }}
                  key: clientId
            - name: OPENID_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.web.auth.openid.secretName }}
                  key: clientSecret
          command:
            - 'bash'
            - '-c'
            - |
              set -x
              cat <<EOF > /xnat/openid-conf.properties
              name="UCL SSO"
              provider.id={{- .Values.web.auth.openid.provider }}
              auth.method=OpenID
              auto.enabled=false
              auto.verified=false
              siteUrl={{ .Values.web.siteUrl }}
              openid.{{- .Values.web.auth.openid.provider -}}.clientId=$OPENID_CLIENT_ID
              openid.{{- .Values.web.auth.openid.provider -}}.clientSecret=$OPENID_CLIENT_SECRET
              openid.{{- .Values.web.auth.openid.provider -}}.accessTokenUri={{ .Values.web.auth.openid.accessTokenUri }}
              openid.{{- .Values.web.auth.openid.provider -}}.userAuthUri={{ .Values.web.auth.openid.userAuthUri }}
              openid.{{- .Values.web.auth.openid.provider -}}.link=<a href="/openid-login?providerId={{- .Values.web.auth.openid.provider -}}">{{ .Values.web.auth.openid.link }}</a>
              openid.{{- .Values.web.auth.openid.provider -}}.forceUserCreate=true
              openid.{{- .Values.web.auth.openid.provider -}}.emailProperty=email
              openid.{{- .Values.web.auth.openid.provider -}}.givenNameProperty=name
              openid.{{- .Values.web.auth.openid.provider -}}.familyNameProperty=deliberately_unknown_property
              EOF
          volumeMounts:
            - name: openid-conf
              mountPath: /xnat/openid-conf.properties
        {{- end }}
      {{- with .Values.web.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.web.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.web.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: node-conf
        - name: xnat-config
      {{- if .Values.web.auth.openid.enabled }}
        - name: xnat-openid-config
      {{- end }}
      {{- range .Values.volumes }}
        - name: {{ .name }}
        {{- if and .persistent .existingClaim }}
          persistentVolumeClaim:
            claimName: {{ printf "%s-%s" (include "xnat.fullname" $) .name }}
        {{- else if not .persistent }}
          {{- if or .configMap .secret }}
          {{- range $key, $value := . }}
            {{- if not (eq $key "name") }}
          {{ $key }}:
          {{- toYaml $value | nindent 12 }}
            {{- end }}
          {{- end }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- end }}
      {{- end }}
  volumeClaimTemplates:
  {{- range .Values.volumes }}
  {{- if and .persistent (not .existingClaim) }}
    - metadata:
        name: {{ .name }}
      {{- with .annotations }}
        annotations:
        {{- range $key, $value := . }}
          {{ $key }}: {{ $value }}
        {{- end }}
      {{- end }}
      spec:
        accessModes: [ {{ .accessMode | quote }} ]
        resources:
          requests:
            storage: {{ .size | quote }}
      {{- if .storageClass }}
        {{- if (eq "-" .storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: "{{ .storageClass }}"
        {{- end }}
      {{- end }}
    {{- end }}
  {{- end }}